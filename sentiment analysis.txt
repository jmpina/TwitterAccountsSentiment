import pandas as pd
import numpy as np
import re
import string
from nltk.tokenize import word_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score
from sklearn.metrics import f1_score
from sklearn.metrics import confusion_matrix
def load_dataset(filename, cols):
    dataset = pd.read_csv(filename, encoding = 'latin-1')
    dataset.columns = cols
    return dataset
def remove_unwanted_cols(dataset, cols):
    for col in cols:
        del dataset[col]
    return dataset
def tokenizer(tweet):
    tweet_tokens=word_tokenize(tweet)
    tokenized_words=[w for w in tweet_tokens]
    return “ “.join(tokenized_words)
def get_feature_vector(train_fit):
    vector = TfidfVectorizer(sublinear_tf=True)
    vector.fit(train_fit)
    return vector
dataset = load_dataset("data/clas_modelo.csv", ['ID', 'SOCIAL', 'TEXTO'])
n_dataset = remove_unwanted_cols(dataset, ['ID'])
dataset.text = dataset['TEXTO'].apply(tokenizer)
dataset.text = dataset['TEXTO'].apply(tokenizer)
tf_vector = get_feature_vector(np.array(dataset.iloc[:, 1]).ravel())
X = tf_vector.transform(np.array(dataset.iloc[:, 1]).ravel())
y = np.array(dataset.iloc[:, 0]).ravel()
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
NB_model = MultinomialNB()
NB_model.fit(X_train, y_train)
y_predict_nb = NB_model.predict(X_test)
print(accuracy_score(y_test, y_predict_nb))
print(precision_score(y_test, y_predict_nb))
print(recall_score(y_test, y_predict_nb))
print(f1_score(y_test, y_predict_nb))
print(confusion_matrix(y_test, y_predict_nb))
LR_model = LogisticRegression(solver='lbfgs')
LR_model.fit(X_train, y_train)
y_predict_lr = LR_model.predict(X_test)
print(accuracy_score(y_test, y_predict_lr))
print(precision_score(y_test, y_predict_lr))
print(recall_score(y_test, y_predict_lr))
print(f1_score(y_test, y_predict_lr))
print(confusion_matrix(y_test, y_predict_lr))
